{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jnthn\\\\OneDrive\\\\Desktop\\\\High projects\\\\jirams_starter\\\\frontend\\\\src\\\\pages\\\\civilian\\\\EvidenceUpload.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport api from \"../../api\";\nimport { Form, Button, Alert, Spinner } from \"react-bootstrap\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function EvidenceUpload() {\n  _s();\n  const {\n    id\n  } = useParams(); // Case ID\n  const [file, setFile] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [success, setSuccess] = useState(\"\");\n  const [error, setError] = useState(\"\");\n  const handleSubmit = async e => {\n    e.preventDefault();\n    if (!file) {\n      setError(\"Please select a file to upload\");\n      return;\n    }\n    setError(\"\");\n    setSuccess(\"\");\n    setLoading(true);\n    try {\n      const formData = new FormData();\n      formData.append(\"file\", file);\n      await api.post(`/cases/${id}/evidence`, formData, {\n        headers: {\n          \"Content-Type\": \"multipart/form-data\"\n        }\n      });\n      setSuccess(\"Evidence uploaded successfully!\");\n      setFile(null);\n    } catch (err) {\n      setError(\"Failed to upload evidence\");\n    } finally {\n      setLoading(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(Form, {\n    onSubmit: handleSubmit,\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"\\uD83D\\uDCC2 Upload Evidence\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(Alert, {\n      variant: \"danger\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 17\n    }, this), success && /*#__PURE__*/_jsxDEV(Alert, {\n      variant: \"success\",\n      children: success\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 19\n    }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n      className: \"mb-3\",\n      children: /*#__PURE__*/_jsxDEV(Form.Control, {\n        type: \"file\",\n        onChange: e => setFile(e.target.files[0])\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      type: \"submit\",\n      disabled: loading,\n      children: loading ? /*#__PURE__*/_jsxDEV(Spinner, {\n        size: \"sm\",\n        animation: \"border\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 20\n      }, this) : \"Upload\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 5\n  }, this);\n}\n_s(EvidenceUpload, \"Y0mdXCdvhoxcOF+exDporIMH7xM=\", false, function () {\n  return [useParams];\n});\n_c = EvidenceUpload;\nvar _c;\n$RefreshReg$(_c, \"EvidenceUpload\");","map":{"version":3,"names":["React","useState","useParams","api","Form","Button","Alert","Spinner","jsxDEV","_jsxDEV","EvidenceUpload","_s","id","file","setFile","loading","setLoading","success","setSuccess","error","setError","handleSubmit","e","preventDefault","formData","FormData","append","post","headers","err","onSubmit","children","fileName","_jsxFileName","lineNumber","columnNumber","variant","Group","className","Control","type","onChange","target","files","disabled","size","animation","_c","$RefreshReg$"],"sources":["C:/Users/jnthn/OneDrive/Desktop/High projects/jirams_starter/frontend/src/pages/civilian/EvidenceUpload.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport api from \"../../api\";\r\nimport { Form, Button, Alert, Spinner } from \"react-bootstrap\";\r\n\r\nexport default function EvidenceUpload() {\r\n  const { id } = useParams(); // Case ID\r\n  const [file, setFile] = useState(null);\r\n  const [loading, setLoading] = useState(false);\r\n  const [success, setSuccess] = useState(\"\");\r\n  const [error, setError] = useState(\"\");\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    if (!file) {\r\n      setError(\"Please select a file to upload\");\r\n      return;\r\n    }\r\n    setError(\"\"); setSuccess(\"\"); setLoading(true);\r\n\r\n    try {\r\n      const formData = new FormData();\r\n      formData.append(\"file\", file);\r\n\r\n      await api.post(`/cases/${id}/evidence`, formData, {\r\n        headers: { \"Content-Type\": \"multipart/form-data\" },\r\n      });\r\n\r\n      setSuccess(\"Evidence uploaded successfully!\");\r\n      setFile(null);\r\n    } catch (err) {\r\n      setError(\"Failed to upload evidence\");\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Form onSubmit={handleSubmit}>\r\n      <h3>ðŸ“‚ Upload Evidence</h3>\r\n      {error && <Alert variant=\"danger\">{error}</Alert>}\r\n      {success && <Alert variant=\"success\">{success}</Alert>}\r\n\r\n      <Form.Group className=\"mb-3\">\r\n        <Form.Control type=\"file\" onChange={(e) => setFile(e.target.files[0])} />\r\n      </Form.Group>\r\n\r\n      <Button type=\"submit\" disabled={loading}>\r\n        {loading ? <Spinner size=\"sm\" animation=\"border\" /> : \"Upload\"}\r\n      </Button>\r\n    </Form>\r\n  );\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}